global
  lua-load /path/to/haproxy-geoip/lua/haproxy_geoip_lookup.lua

defaults
  # log global
  # mode    tcp
  # option  dontlognull
  log /dev/log local0
  # log stdout format raw local0
  timeout connect 5s
  timeout client 2m
  timeout server 2m

frontend http
  bind [::]:80 v4v6
  
  ## redirect scheme https code 301, choose either one
  # redirect scheme https code 301 if !{ ssl_fc }
  # http-request redirect scheme https unless { ssl_fc }
  
  acl acl_whitelist src 172.16.0.0/12 10.0.0.0/8 192.168.0.0/16 127.0.0.0/8 ::1

  tcp-request content set-var(txn.geoip_country) str(00) if acl_whitelist
  tcp-request content lua.lookup_geoip_country if !{ var(txn.geoip_country) -m found }
  tcp-request content capture var(txn.geoip_country) len 2
  acl is_src_allowed var(txn.geoip_country) -m str US 00
  
  acl acl_valid_domains hdr(host) -m reg -i ^([^.]+\.)*(web\.example\.org|gw\.example\.org)$
  
  # https://blog.abhi.host/blog/2022/07/26/HAproxy-log-http-https-headers-in-tcp-mode/
  tcp-request inspect-delay 5s
  tcp-request content capture req.hdr(Host) len 100
  
  tcp-request content silent-drop if !acl_valid_domains
  use_backend traefik_http_bk if acl_valid_domains is_src_allowed

  # redirect scheme https code 301 if !{ ssl_fc } acl_valid_domains

  log-format "HTTP Time=[%t] Client=%ci:%cp Country=%[capture.req.hdr(0)] SNI=%[capture.req.hdr(1)] Timing=%Tw/%Tc/%Tt Bytes=%B Status=%ts"

frontend ssl
  bind [::]:443 v4v6
  
  acl acl_whitelist src 172.16.0.0/12 10.0.0.0/8 192.168.0.0/16 127.0.0.0/8 ::1

  tcp-request content set-var(txn.geoip_country) str(00) if acl_whitelist
  tcp-request content lua.lookup_geoip_country if !{ var(txn.geoip_country) -m found }
  tcp-request content capture var(txn.geoip_country) len 2
  acl is_src_allowed var(txn.geoip_country) -m str US 00

  tcp-request inspect-delay 5s
  tcp-request content capture req.ssl_sni len 100
  tcp-request content accept if { req_ssl_hello_type 1 }

  acl tls req.ssl_hello_type 1
  acl has_sni req.ssl_sni -m found
  acl has_valid_sni req.ssl_sni -m reg -i ^([^.]+\.)*(web\.example\.org|gw\.example\.org)$

  tcp-request content silent-drop if !has_sni
  tcp-request content silent-drop if !has_valid_sni

  use_backend traefik_bk if tls { req.ssl_sni -i web.example.org } is_src_allowed
  use_backend ocserv_bk if tls { req.ssl_sni -i gw.example.org } 

  log-format "TLS Time=[%t] Client=%ci:%cp Country=%[capture.req.hdr(0)] SNI=%[capture.req.hdr(1)] Timing=%Tw/%Tc/%Tt Bytes=%B Status=%ts"

backend traefik_http_bk
  mode tcp
  server traefik ipv4@172.19.0.3:80 send-proxy-v2

backend traefik_bk
  mode tcp
  server traefik ipv4@172.19.0.3:443 send-proxy-v2 send-proxy-v2-ssl-cn

backend ocserv_bk
  mode tcp
  server ocserv ipv4@172.19.0.5:443 send-proxy-v2 send-proxy-v2-ssl-cn

